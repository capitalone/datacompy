Search.setIndex({"alltitles": {"API Reference": [[6, null]], "Basic Usage": [[5, "basic-usage"], [9, "basic-usage"]], "Benchmarks": [[3, null]], "Caveats": [[8, "caveats"]], "Caveats and Limitations": [[9, "caveats-and-limitations"]], "Compare Object Setup": [[8, "compare-object-setup"], [9, "compare-object-setup"]], "Contents": [[6, "contents"]], "Contributors": [[6, "contributors"]], "Convenience Methods": [[8, "convenience-methods"], [9, "convenience-methods"], [10, "convenience-methods"]], "Cross Comparing": [[5, "cross-comparing"]], "DataComPy": [[6, null]], "Developer Instructions": [[4, null]], "Duplicate rows": [[8, "duplicate-rows"], [9, "duplicate-rows"], [10, "duplicate-rows"]], "Fugue Detail": [[5, null]], "Future releases": [[5, "future-releases"]], "Generating Documentation": [[4, "generating-documentation"]], "Generating distribution archives (PyPI)": [[4, "generating-distribution-archives-pypi"]], "How it works": [[5, "how-it-works"]], "Indices and tables": [[6, "indices-and-tables"]], "Installation": [[7, null]], "Installing extras": [[6, "installing-extras"]], "Legacy Spark Deprecation": [[6, "legacy-spark-deprecation"]], "Limitations": [[8, "limitations"]], "Management of Requirements": [[4, "management-of-requirements"]], "Module contents": [[0, "module-datacompy"], [1, "module-datacompy.spark"]], "Overview": [[8, "overview"], [9, "overview"]], "Pandas Usage": [[8, null]], "Polars Usage": [[9, null]], "Pre-Commit Hooks": [[4, "pre-commit-hooks"]], "PyPI (basic)": [[7, "pypi-basic"]], "Quick Installation": [[6, "quick-installation"]], "Release Guide": [[4, "release-guide"]], "Reports": [[8, "reports"], [9, "reports"], [10, "reports"]], "Roadmap": [[6, "roadmap"]], "Run unit tests": [[4, "run-unit-tests"]], "Setup used": [[3, "setup-used"]], "Spark Usage": [[10, null]], "SparkPandasCompare and SparkSQLCompare Object Setup": [[10, "sparkpandascompare-and-sparksqlcompare-object-setup"]], "Submodules": [[0, "submodules"], [1, "submodules"]], "Subpackages": [[0, "subpackages"]], "Supported Version": [[10, "supported-version"]], "Supported backends": [[6, "supported-backends"]], "Supported versions and dependncies": [[6, "supported-versions-and-dependncies"]], "TLDR": [[3, "tldr"]], "The Data": [[3, "the-data"]], "conda (installs dependencies from Conda Forge)": [[7, "conda-installs-dependencies-from-conda-forge"]], "datacompy": [[2, null]], "datacompy package": [[0, null]], "datacompy.base module": [[0, "module-datacompy.base"]], "datacompy.core module": [[0, "module-datacompy.core"]], "datacompy.fugue module": [[0, "module-datacompy.fugue"]], "datacompy.polars module": [[0, "module-datacompy.polars"]], "datacompy.spark package": [[1, null]], "datacompy.spark.legacy module": [[1, "module-datacompy.spark.legacy"]], "datacompy.spark.pandas module": [[1, "module-datacompy.spark.pandas"]], "datacompy.spark.sql module": [[1, "module-datacompy.spark.sql"]], "edgetest": [[4, "edgetest"]], "virtualenv (install dependencies from PyPI)": [[7, "virtualenv-install-dependencies-from-pypi"]]}, "docnames": ["api/datacompy", "api/datacompy.spark", "api/modules", "benchmark", "developer_instructions", "fugue_usage", "index", "install", "pandas_usage", "polars_usage", "spark_usage"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["api/datacompy.rst", "api/datacompy.spark.rst", "api/modules.rst", "benchmark.rst", "developer_instructions.rst", "fugue_usage.rst", "index.rst", "install.rst", "pandas_usage.rst", "polars_usage.rst", "spark_usage.rst"], "indexentries": {"all_columns_match() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.all_columns_match", false]], "all_columns_match() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.all_columns_match", false]], "all_columns_match() (datacompy.compare method)": [[0, "datacompy.Compare.all_columns_match", false]], "all_columns_match() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.all_columns_match", false]], "all_columns_match() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.all_columns_match", false]], "all_columns_match() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.all_columns_match", false]], "all_columns_match() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.all_columns_match", false]], "all_columns_match() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.all_columns_match", false]], "all_columns_match() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.all_columns_match", false]], "all_columns_match() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.all_columns_match", false]], "all_columns_match() (in module datacompy)": [[0, "datacompy.all_columns_match", false]], "all_columns_match() (in module datacompy.fugue)": [[0, "datacompy.fugue.all_columns_match", false]], "all_mismatch() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.all_mismatch", false]], "all_mismatch() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.all_mismatch", false]], "all_mismatch() (datacompy.compare method)": [[0, "datacompy.Compare.all_mismatch", false]], "all_mismatch() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.all_mismatch", false]], "all_mismatch() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.all_mismatch", false]], "all_mismatch() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.all_mismatch", false]], "all_mismatch() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.all_mismatch", false]], "all_mismatch() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.all_mismatch", false]], "all_mismatch() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.all_mismatch", false]], "all_mismatch() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.all_mismatch", false]], "all_rows_overlap() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.compare method)": [[0, "datacompy.Compare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.all_rows_overlap", false]], "all_rows_overlap() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.all_rows_overlap", false]], "all_rows_overlap() (in module datacompy)": [[0, "datacompy.all_rows_overlap", false]], "all_rows_overlap() (in module datacompy.fugue)": [[0, "datacompy.fugue.all_rows_overlap", false]], "base_row_count (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.base_row_count", false]], "basecompare (class in datacompy)": [[0, "datacompy.BaseCompare", false]], "basecompare (class in datacompy.base)": [[0, "datacompy.base.BaseCompare", false]], "calculate_max_diff() (in module datacompy)": [[0, "datacompy.calculate_max_diff", false]], "calculate_max_diff() (in module datacompy.core)": [[0, "datacompy.core.calculate_max_diff", false]], "calculate_max_diff() (in module datacompy.polars)": [[0, "datacompy.polars.calculate_max_diff", false]], "calculate_max_diff() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.calculate_max_diff", false]], "calculate_max_diff() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.calculate_max_diff", false]], "calculate_null_diff() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.calculate_null_diff", false]], "columns_compared (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.columns_compared", false]], "columns_equal() (in module datacompy)": [[0, "datacompy.columns_equal", false]], "columns_equal() (in module datacompy.core)": [[0, "datacompy.core.columns_equal", false]], "columns_equal() (in module datacompy.polars)": [[0, "datacompy.polars.columns_equal", false]], "columns_equal() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.columns_equal", false]], "columns_equal() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.columns_equal", false]], "columns_in_both (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.columns_in_both", false]], "columns_only_base (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.columns_only_base", false]], "columns_only_compare (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.columns_only_compare", false]], "common_row_count (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.common_row_count", false]], "compare (class in datacompy)": [[0, "datacompy.Compare", false]], "compare (class in datacompy.core)": [[0, "datacompy.core.Compare", false]], "compare_row_count (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.compare_row_count", false]], "compare_string_and_date_columns() (in module datacompy)": [[0, "datacompy.compare_string_and_date_columns", false]], "compare_string_and_date_columns() (in module datacompy.core)": [[0, "datacompy.core.compare_string_and_date_columns", false]], "compare_string_and_date_columns() (in module datacompy.polars)": [[0, "datacompy.polars.compare_string_and_date_columns", false]], "compare_string_and_date_columns() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.compare_string_and_date_columns", false]], "count_matching_rows() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.compare method)": [[0, "datacompy.Compare.count_matching_rows", false]], "count_matching_rows() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.count_matching_rows", false]], "count_matching_rows() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.count_matching_rows", false]], "count_matching_rows() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.count_matching_rows", false]], "count_matching_rows() (in module datacompy)": [[0, "datacompy.count_matching_rows", false]], "count_matching_rows() (in module datacompy.fugue)": [[0, "datacompy.fugue.count_matching_rows", false]], "datacompy": [[0, "module-datacompy", false]], "datacompy.base": [[0, "module-datacompy.base", false]], "datacompy.core": [[0, "module-datacompy.core", false]], "datacompy.fugue": [[0, "module-datacompy.fugue", false]], "datacompy.polars": [[0, "module-datacompy.polars", false]], "datacompy.spark": [[1, "module-datacompy.spark", false]], "datacompy.spark.legacy": [[1, "module-datacompy.spark.legacy", false]], "datacompy.spark.pandas": [[1, "module-datacompy.spark.pandas", false]], "datacompy.spark.sql": [[1, "module-datacompy.spark.sql", false]], "decimal_comparator() (in module datacompy.spark.legacy)": [[1, "datacompy.spark.legacy.decimal_comparator", false]], "decimal_comparator() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.decimal_comparator", false]], "df1 (datacompy.base.basecompare property)": [[0, "datacompy.base.BaseCompare.df1", false]], "df1 (datacompy.basecompare property)": [[0, "datacompy.BaseCompare.df1", false]], "df1 (datacompy.compare property)": [[0, "datacompy.Compare.df1", false]], "df1 (datacompy.core.compare property)": [[0, "datacompy.core.Compare.df1", false]], "df1 (datacompy.polars.polarscompare property)": [[0, "datacompy.polars.PolarsCompare.df1", false]], "df1 (datacompy.polarscompare property)": [[0, "datacompy.PolarsCompare.df1", false]], "df1 (datacompy.spark.pandas.sparkpandascompare property)": [[1, "datacompy.spark.pandas.SparkPandasCompare.df1", false]], "df1 (datacompy.spark.sql.sparksqlcompare property)": [[1, "datacompy.spark.sql.SparkSQLCompare.df1", false]], "df1 (datacompy.sparkpandascompare property)": [[0, "datacompy.SparkPandasCompare.df1", false]], "df1 (datacompy.sparksqlcompare property)": [[0, "datacompy.SparkSQLCompare.df1", false]], "df1_unq_columns() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.compare method)": [[0, "datacompy.Compare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.df1_unq_columns", false]], "df1_unq_columns() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.df1_unq_columns", false]], "df2 (datacompy.base.basecompare property)": [[0, "datacompy.base.BaseCompare.df2", false]], "df2 (datacompy.basecompare property)": [[0, "datacompy.BaseCompare.df2", false]], "df2 (datacompy.compare property)": [[0, "datacompy.Compare.df2", false]], "df2 (datacompy.core.compare property)": [[0, "datacompy.core.Compare.df2", false]], "df2 (datacompy.polars.polarscompare property)": [[0, "datacompy.polars.PolarsCompare.df2", false]], "df2 (datacompy.polarscompare property)": [[0, "datacompy.PolarsCompare.df2", false]], "df2 (datacompy.spark.pandas.sparkpandascompare property)": [[1, "datacompy.spark.pandas.SparkPandasCompare.df2", false]], "df2 (datacompy.spark.sql.sparksqlcompare property)": [[1, "datacompy.spark.sql.SparkSQLCompare.df2", false]], "df2 (datacompy.sparkpandascompare property)": [[0, "datacompy.SparkPandasCompare.df2", false]], "df2 (datacompy.sparksqlcompare property)": [[0, "datacompy.SparkSQLCompare.df2", false]], "df2_unq_columns() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.compare method)": [[0, "datacompy.Compare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.df2_unq_columns", false]], "df2_unq_columns() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.df2_unq_columns", false]], "generate_id_within_group() (in module datacompy)": [[0, "datacompy.generate_id_within_group", false]], "generate_id_within_group() (in module datacompy.core)": [[0, "datacompy.core.generate_id_within_group", false]], "generate_id_within_group() (in module datacompy.polars)": [[0, "datacompy.polars.generate_id_within_group", false]], "generate_id_within_group() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.generate_id_within_group", false]], "get_merged_columns() (in module datacompy)": [[0, "datacompy.get_merged_columns", false]], "get_merged_columns() (in module datacompy.core)": [[0, "datacompy.core.get_merged_columns", false]], "get_merged_columns() (in module datacompy.polars)": [[0, "datacompy.polars.get_merged_columns", false]], "get_merged_columns() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.get_merged_columns", false]], "get_merged_columns() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.get_merged_columns", false]], "intersect_columns() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.intersect_columns", false]], "intersect_columns() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.intersect_columns", false]], "intersect_columns() (datacompy.compare method)": [[0, "datacompy.Compare.intersect_columns", false]], "intersect_columns() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.intersect_columns", false]], "intersect_columns() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.intersect_columns", false]], "intersect_columns() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.intersect_columns", false]], "intersect_columns() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.intersect_columns", false]], "intersect_columns() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.intersect_columns", false]], "intersect_columns() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.intersect_columns", false]], "intersect_columns() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.intersect_columns", false]], "intersect_columns() (in module datacompy)": [[0, "datacompy.intersect_columns", false]], "intersect_columns() (in module datacompy.fugue)": [[0, "datacompy.fugue.intersect_columns", false]], "intersect_rows_match() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.compare method)": [[0, "datacompy.Compare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.intersect_rows_match", false]], "intersect_rows_match() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.intersect_rows_match", false]], "is_match() (in module datacompy)": [[0, "datacompy.is_match", false]], "is_match() (in module datacompy.fugue)": [[0, "datacompy.fugue.is_match", false]], "known_difference (datacompy.spark.legacy.matchtype attribute)": [[1, "datacompy.spark.legacy.MatchType.KNOWN_DIFFERENCE", false]], "legacysparkcompare (class in datacompy.spark.legacy)": [[1, "datacompy.spark.legacy.LegacySparkCompare", false]], "match (datacompy.spark.legacy.matchtype attribute)": [[1, "datacompy.spark.legacy.MatchType.MATCH", false]], "matches() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.matches", false]], "matches() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.matches", false]], "matches() (datacompy.compare method)": [[0, "datacompy.Compare.matches", false]], "matches() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.matches", false]], "matches() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.matches", false]], "matches() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.matches", false]], "matches() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.matches", false]], "matches() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.matches", false]], "matches() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.matches", false]], "matches() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.matches", false]], "matchtype (class in datacompy.spark.legacy)": [[1, "datacompy.spark.legacy.MatchType", false]], "mismatch (datacompy.spark.legacy.matchtype attribute)": [[1, "datacompy.spark.legacy.MatchType.MISMATCH", false]], "module": [[0, "module-datacompy", false], [0, "module-datacompy.base", false], [0, "module-datacompy.core", false], [0, "module-datacompy.fugue", false], [0, "module-datacompy.polars", false], [1, "module-datacompy.spark", false], [1, "module-datacompy.spark.legacy", false], [1, "module-datacompy.spark.pandas", false], [1, "module-datacompy.spark.sql", false]], "polarscompare (class in datacompy)": [[0, "datacompy.PolarsCompare", false]], "polarscompare (class in datacompy.polars)": [[0, "datacompy.polars.PolarsCompare", false]], "render() (in module datacompy)": [[0, "datacompy.render", false]], "render() (in module datacompy.core)": [[0, "datacompy.core.render", false]], "render() (in module datacompy.polars)": [[0, "datacompy.polars.render", false]], "render() (in module datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.render", false]], "render() (in module datacompy.spark.sql)": [[1, "datacompy.spark.sql.render", false]], "report() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.report", false]], "report() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.report", false]], "report() (datacompy.compare method)": [[0, "datacompy.Compare.report", false]], "report() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.report", false]], "report() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.report", false]], "report() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.report", false]], "report() (datacompy.spark.legacy.legacysparkcompare method)": [[1, "datacompy.spark.legacy.LegacySparkCompare.report", false]], "report() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.report", false]], "report() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.report", false]], "report() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.report", false]], "report() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.report", false]], "report() (in module datacompy)": [[0, "datacompy.report", false]], "report() (in module datacompy.fugue)": [[0, "datacompy.fugue.report", false]], "rows_both_all (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.rows_both_all", false]], "rows_both_mismatch (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.rows_both_mismatch", false]], "rows_only_base (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.rows_only_base", false]], "rows_only_compare (datacompy.spark.legacy.legacysparkcompare property)": [[1, "datacompy.spark.legacy.LegacySparkCompare.rows_only_compare", false]], "sample_mismatch() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.compare method)": [[0, "datacompy.Compare.sample_mismatch", false]], "sample_mismatch() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.sample_mismatch", false]], "sample_mismatch() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.sample_mismatch", false]], "sample_mismatch() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.sample_mismatch", false]], "sparkpandascompare (class in datacompy)": [[0, "datacompy.SparkPandasCompare", false]], "sparkpandascompare (class in datacompy.spark.pandas)": [[1, "datacompy.spark.pandas.SparkPandasCompare", false]], "sparksqlcompare (class in datacompy)": [[0, "datacompy.SparkSQLCompare", false]], "sparksqlcompare (class in datacompy.spark.sql)": [[1, "datacompy.spark.sql.SparkSQLCompare", false]], "subset() (datacompy.base.basecompare method)": [[0, "datacompy.base.BaseCompare.subset", false]], "subset() (datacompy.basecompare method)": [[0, "datacompy.BaseCompare.subset", false]], "subset() (datacompy.compare method)": [[0, "datacompy.Compare.subset", false]], "subset() (datacompy.core.compare method)": [[0, "datacompy.core.Compare.subset", false]], "subset() (datacompy.polars.polarscompare method)": [[0, "datacompy.polars.PolarsCompare.subset", false]], "subset() (datacompy.polarscompare method)": [[0, "datacompy.PolarsCompare.subset", false]], "subset() (datacompy.spark.pandas.sparkpandascompare method)": [[1, "datacompy.spark.pandas.SparkPandasCompare.subset", false]], "subset() (datacompy.spark.sql.sparksqlcompare method)": [[1, "datacompy.spark.sql.SparkSQLCompare.subset", false]], "subset() (datacompy.sparkpandascompare method)": [[0, "datacompy.SparkPandasCompare.subset", false]], "subset() (datacompy.sparksqlcompare method)": [[0, "datacompy.SparkSQLCompare.subset", false]], "temp_column_name() (in module datacompy)": [[0, "datacompy.temp_column_name", false]], "temp_column_name() (in module datacompy.base)": [[0, "datacompy.base.temp_column_name", false]], "unq_columns() (in module datacompy)": [[0, "datacompy.unq_columns", false]], "unq_columns() (in module datacompy.fugue)": [[0, "datacompy.fugue.unq_columns", false]]}, "objects": {"": [[0, 0, 0, "-", "datacompy"]], "datacompy": [[0, 1, 1, "", "BaseCompare"], [0, 1, 1, "", "Compare"], [0, 1, 1, "", "PolarsCompare"], [0, 1, 1, "", "SparkPandasCompare"], [0, 1, 1, "", "SparkSQLCompare"], [0, 4, 1, "", "all_columns_match"], [0, 4, 1, "", "all_rows_overlap"], [0, 0, 0, "-", "base"], [0, 4, 1, "", "calculate_max_diff"], [0, 4, 1, "", "columns_equal"], [0, 4, 1, "", "compare_string_and_date_columns"], [0, 0, 0, "-", "core"], [0, 4, 1, "", "count_matching_rows"], [0, 0, 0, "-", "fugue"], [0, 4, 1, "", "generate_id_within_group"], [0, 4, 1, "", "get_merged_columns"], [0, 4, 1, "", "intersect_columns"], [0, 4, 1, "", "is_match"], [0, 0, 0, "-", "polars"], [0, 4, 1, "", "render"], [0, 4, 1, "", "report"], [1, 0, 0, "-", "spark"], [0, 4, 1, "", "temp_column_name"], [0, 4, 1, "", "unq_columns"]], "datacompy.BaseCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.Compare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.PolarsCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.SparkPandasCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.SparkSQLCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.base": [[0, 1, 1, "", "BaseCompare"], [0, 4, 1, "", "temp_column_name"]], "datacompy.base.BaseCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.core": [[0, 1, 1, "", "Compare"], [0, 4, 1, "", "calculate_max_diff"], [0, 4, 1, "", "columns_equal"], [0, 4, 1, "", "compare_string_and_date_columns"], [0, 4, 1, "", "generate_id_within_group"], [0, 4, 1, "", "get_merged_columns"], [0, 4, 1, "", "render"]], "datacompy.core.Compare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.fugue": [[0, 4, 1, "", "all_columns_match"], [0, 4, 1, "", "all_rows_overlap"], [0, 4, 1, "", "count_matching_rows"], [0, 4, 1, "", "intersect_columns"], [0, 4, 1, "", "is_match"], [0, 4, 1, "", "report"], [0, 4, 1, "", "unq_columns"]], "datacompy.polars": [[0, 1, 1, "", "PolarsCompare"], [0, 4, 1, "", "calculate_max_diff"], [0, 4, 1, "", "columns_equal"], [0, 4, 1, "", "compare_string_and_date_columns"], [0, 4, 1, "", "generate_id_within_group"], [0, 4, 1, "", "get_merged_columns"], [0, 4, 1, "", "render"]], "datacompy.polars.PolarsCompare": [[0, 2, 1, "", "all_columns_match"], [0, 2, 1, "", "all_mismatch"], [0, 2, 1, "", "all_rows_overlap"], [0, 2, 1, "", "count_matching_rows"], [0, 3, 1, "", "df1"], [0, 2, 1, "", "df1_unq_columns"], [0, 3, 1, "", "df2"], [0, 2, 1, "", "df2_unq_columns"], [0, 2, 1, "", "intersect_columns"], [0, 2, 1, "", "intersect_rows_match"], [0, 2, 1, "", "matches"], [0, 2, 1, "", "report"], [0, 2, 1, "", "sample_mismatch"], [0, 2, 1, "", "subset"]], "datacompy.spark": [[1, 0, 0, "-", "legacy"], [1, 0, 0, "-", "pandas"], [1, 0, 0, "-", "sql"]], "datacompy.spark.legacy": [[1, 1, 1, "", "LegacySparkCompare"], [1, 1, 1, "", "MatchType"], [1, 4, 1, "", "decimal_comparator"]], "datacompy.spark.legacy.LegacySparkCompare": [[1, 3, 1, "", "base_row_count"], [1, 3, 1, "", "columns_compared"], [1, 3, 1, "", "columns_in_both"], [1, 3, 1, "", "columns_only_base"], [1, 3, 1, "", "columns_only_compare"], [1, 3, 1, "", "common_row_count"], [1, 3, 1, "", "compare_row_count"], [1, 2, 1, "", "report"], [1, 3, 1, "", "rows_both_all"], [1, 3, 1, "", "rows_both_mismatch"], [1, 3, 1, "", "rows_only_base"], [1, 3, 1, "", "rows_only_compare"]], "datacompy.spark.legacy.MatchType": [[1, 5, 1, "", "KNOWN_DIFFERENCE"], [1, 5, 1, "", "MATCH"], [1, 5, 1, "", "MISMATCH"]], "datacompy.spark.pandas": [[1, 1, 1, "", "SparkPandasCompare"], [1, 4, 1, "", "calculate_max_diff"], [1, 4, 1, "", "columns_equal"], [1, 4, 1, "", "compare_string_and_date_columns"], [1, 4, 1, "", "generate_id_within_group"], [1, 4, 1, "", "get_merged_columns"], [1, 4, 1, "", "render"]], "datacompy.spark.pandas.SparkPandasCompare": [[1, 2, 1, "", "all_columns_match"], [1, 2, 1, "", "all_mismatch"], [1, 2, 1, "", "all_rows_overlap"], [1, 2, 1, "", "count_matching_rows"], [1, 3, 1, "", "df1"], [1, 2, 1, "", "df1_unq_columns"], [1, 3, 1, "", "df2"], [1, 2, 1, "", "df2_unq_columns"], [1, 2, 1, "", "intersect_columns"], [1, 2, 1, "", "intersect_rows_match"], [1, 2, 1, "", "matches"], [1, 2, 1, "", "report"], [1, 2, 1, "", "sample_mismatch"], [1, 2, 1, "", "subset"]], "datacompy.spark.sql": [[1, 1, 1, "", "SparkSQLCompare"], [1, 4, 1, "", "calculate_max_diff"], [1, 4, 1, "", "calculate_null_diff"], [1, 4, 1, "", "columns_equal"], [1, 4, 1, "", "decimal_comparator"], [1, 4, 1, "", "get_merged_columns"], [1, 4, 1, "", "render"]], "datacompy.spark.sql.SparkSQLCompare": [[1, 2, 1, "", "all_columns_match"], [1, 2, 1, "", "all_mismatch"], [1, 2, 1, "", "all_rows_overlap"], [1, 2, 1, "", "count_matching_rows"], [1, 3, 1, "", "df1"], [1, 2, 1, "", "df1_unq_columns"], [1, 3, 1, "", "df2"], [1, 2, 1, "", "df2_unq_columns"], [1, 2, 1, "", "intersect_columns"], [1, 2, 1, "", "intersect_rows_match"], [1, 2, 1, "", "matches"], [1, 2, 1, "", "report"], [1, 2, 1, "", "sample_mismatch"], [1, 2, 1, "", "subset"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "terms": {"": [0, 1, 6, 8, 9, 10], "0": [0, 1, 3, 4, 5, 6, 8, 9, 10], "000": [3, 8, 9, 10], "0000": [8, 9, 10], "0001": [8, 9], "0005": [8, 9, 10], "01": [5, 8, 9, 10], "025": 3, "041": 3, "05": [5, 8, 9, 10], "0500": [8, 9, 10], "0701": 3, "1": [0, 1, 3, 4, 5, 6, 8, 9, 10], "10": [0, 1, 3, 5, 6, 8, 9, 10], "100": [1, 3], "1000": 3, "10000001234": [5, 8, 9, 10], "10000001235": [5, 8, 9, 10], "10000001236": [5, 8, 9, 10], "10000001237": [5, 8, 9, 10], "10000001238": [5, 8, 9, 10], "10000001239": [5, 10], "109": 3, "11": [3, 6, 9], "111": [5, 8, 9, 10], "1113": 3, "12": [5, 6, 7, 8, 9, 10], "120": 3, "123": [5, 8, 9, 10], "123456": [5, 8, 9, 10], "1257": 3, "127": 3, "13": [6, 10], "130": 3, "1345": [5, 8, 9, 10], "14": 0, "14530": [5, 8, 9, 10], "15": 3, "155": [5, 8, 9, 10], "1555": [5, 8, 9, 10], "16": 3, "17": 3, "175": 3, "18": 3, "193": 3, "194": 3, "196": 3, "2": [0, 1, 3, 6, 8, 9, 10], "20": 3, "2017": [5, 8, 9, 10], "21": 4, "2185": 3, "234": 3, "262": 3, "2763": 3, "2838": 3, "3": [3, 4, 6, 7, 8, 9, 10], "304": 3, "31": 3, "3112": 3, "3204": 3, "32gb": 3, "330": 3, "345": [5, 8, 9, 10], "4": [5, 6, 8, 9, 10], "44101": 10, "45": [5, 8, 9, 10], "455": 3, "47": 3, "494": 3, "5": [4, 6, 8, 9, 10], "50": 3, "500": 3, "560": 3, "57": 3, "5735": 3, "578": 3, "6": [3, 4, 8, 9, 10], "6094": 3, "62": 3, "6274": 3, "64gb": 3, "7": [4, 8], "743": 3, "8": [1, 3, 9], "804": 3, "827": 3, "9": [6, 7], "90": 3, "94": 3, "96": 3, "9814": 3, "A": [0, 1, 4, 7, 8, 9, 10], "And": [8, 10], "As": [0, 9], "At": 6, "By": [1, 6], "For": [4, 5, 8, 9, 10], "If": [0, 1, 3, 6, 7, 8, 10], "In": [4, 5, 8], "It": [3, 4, 8, 10], "No": 10, "OR": [8, 9], "The": [0, 1, 4, 5, 6, 8, 9, 10], "Then": [0, 4, 6], "There": [8, 9, 10], "To": [6, 10], "Will": [0, 1], "With": [5, 6, 10], "_df1": [0, 1], "_io": 1, "_merge_left": 10, "_merge_right": 10, "_temp_x": 0, "ab": [0, 1], "abc": 0, "abl": 3, "about": [4, 8], "abov": [4, 6, 7, 8, 9, 10], "abs_tol": [0, 1, 5, 8, 9, 10], "absolut": [0, 1, 8, 9, 10], "abstract": 0, "accept": [6, 10], "access": 5, "acct_id": [5, 8, 9, 10], "acct_id_df1": 10, "acct_id_df2": 10, "accur": [0, 6], "achiev": 5, "across": [5, 6], "action": 4, "activ": [4, 7], "actual": [0, 1], "ad": [0, 1, 4], "add": 7, "addit": 4, "adher": 6, "adopt": 5, "after": [4, 8, 9, 10], "again": [8, 10], "against": 1, "aggreg": 5, "agreement": 6, "align": [6, 10], "all": [0, 1, 4, 6, 7, 8, 9, 10], "all_columns_match": [0, 1, 2, 5, 6], "all_mismatch": [0, 1, 2], "all_rows_overlap": [0, 1, 2, 5, 6], "allow": [0, 1], "alreadi": [1, 8], "also": [1, 4, 5, 6, 8, 9, 10], "alwai": 3, "amount": [0, 1, 3], "an": [0, 1, 3, 9], "ani": [0, 1, 4, 6, 8, 9, 10], "anoth": [0, 1], "anydatafram": 0, "apach": [9, 10], "api": [4, 10], "apidoc": 4, "append": [0, 1], "appli": [0, 1], "appreci": 6, "ar": [0, 1, 4, 5, 6, 7, 8, 9, 10], "archiv": 6, "arr1": 8, "arr2": 8, "arrow": [5, 6, 9], "artifact": 4, "ask": 6, "assert_almost_equ": 8, "assert_array_equ": 8, "assert_frame_equ": 8, "assert_series_equ": 8, "attempt": [0, 1], "attribut": 10, "autom": 4, "automag": [0, 1], "automat": 4, "avail": [8, 9, 10], "awar": 9, "b": 1, "back": 4, "backend": 5, "background": 5, "base": [1, 2, 3, 4, 5, 6, 8], "base_column_nam": 1, "base_df": 1, "base_row_count": [0, 1], "basecompar": [0, 1, 2, 6], "basi": 1, "basic": [0, 1, 6], "been": [6, 8, 9, 10], "befor": [0, 1, 4, 6, 8, 10], "behaviour": [6, 9, 10], "behind": [4, 8, 10], "being": [1, 4], "below": [4, 6], "benchmark": 6, "benefit": 5, "best": 3, "better": [6, 10], "between": [0, 1, 8], "bias": 3, "bin": 7, "black": 4, "bluth": [5, 8, 9, 10], "bob": [5, 8, 9, 10], "bool": [0, 1, 9], "boolean": [0, 1], "both": [0, 1, 10], "boto3": 4, "branch": 4, "break": 4, "brows": 10, "build": 4, "builder": [5, 10], "c": 4, "cach": 1, "cache_intermedi": 1, "calculate_max_diff": [0, 1, 2, 6], "calculate_null_diff": [0, 1], "call": [8, 9, 10], "can": [0, 1, 3, 4, 5, 6, 8, 9, 10], "canon": 1, "capabl": 8, "carri": [0, 6], "case": [0, 1, 5], "cast": [0, 1], "cast_column_names_low": [0, 1], "caus": 1, "caveat": 6, "certain": 1, "chang": 4, "channel": 7, "check": [0, 1, 8], "checkout": 4, "choic": 8, "chunk": 5, "cla": 6, "class": [0, 1, 5, 6, 8, 10], "clean": 4, "coars": 5, "code": [4, 5, 6, 9], "cogroup": 5, "col_1": [0, 1], "col_2": [0, 1], "col_match": 1, "collaps": 4, "collect": 4, "column": [0, 1, 3, 5, 8, 9, 10], "column_count": [0, 1], "column_map": 1, "columnar": 9, "columns_compar": [0, 1], "columns_equ": [0, 1, 2, 6], "columns_in_both": [0, 1], "columns_map": 1, "columns_only_bas": [0, 1], "columns_only_compar": [0, 1], "combin": [8, 10], "come": [4, 8, 9], "command": [0, 1, 4], "commit": 6, "common": [1, 8, 9, 10], "common_row_count": [0, 1], "commun": [4, 5], "compar": [0, 1, 2, 3, 6, 10], "compare_column_nam": 1, "compare_df": 1, "compare_row_count": [0, 1], "compare_string_and_date_column": [0, 1, 2, 6], "comparin": 1, "comparison": [0, 1, 5, 8, 9, 10], "compat": [5, 6], "compris": 1, "conda": 6, "conduct": 6, "config": 7, "configur": 4, "consid": [0, 1, 9], "consist": [1, 3, 5, 6, 10], "constraint": 8, "contain": [0, 1, 8], "content": 2, "contribut": [3, 6], "control": [0, 1], "conveni": 6, "convent": 1, "convert": [0, 1, 8], "core": [2, 3, 4, 6], "correspond": [4, 5], "could": 8, "count": [0, 1], "count_matching_row": [0, 1, 2, 6], "cpu": 3, "creat": [0, 1, 3, 7], "createdatafram": [5, 10], "creation": [0, 1], "cross": 6, "current": [6, 8, 10], "dai": 4, "dask": [5, 6], "data": [0, 1, 5, 6, 8], "data1": [5, 8, 9, 10], "data2": [5, 8, 9, 10], "datacompi": [4, 5, 7, 8, 9, 10], "datacompy_nul": 8, "datafram": [0, 1, 3, 5, 6, 8, 9, 10], "dataset": [1, 3, 5, 8], "date": [0, 1, 4], "date_fld": [5, 8, 9, 10], "date_fld_df1": 10, "de": 1, "decim": [0, 1], "decimal_compar": [0, 1], "decis": 4, "dedup": 1, "dedupl": [0, 1], "default": [0, 1, 4, 5, 10], "defin": [1, 4], "denot": [1, 4], "depend": [4, 5, 6], "deprec": [5, 10], "describ": [1, 8], "detail": [4, 6], "dev": 4, "develop": 6, "df1": [0, 1, 2, 5, 8, 9, 10], "df1_name": [0, 1, 5, 8, 9, 10], "df1_unq_column": [0, 1, 2, 8, 9, 10], "df1_unq_row": [0, 1, 8, 9, 10], "df2": [0, 1, 2, 5, 8, 9, 10], "df2_name": [0, 1, 5, 8, 9, 10], "df2_unq_column": [0, 1, 2, 8, 9, 10], "df2_unq_row": [0, 1, 8, 9, 10], "dict": 1, "dictionari": 1, "did": 3, "diff": [1, 8, 9, 10], "differ": [0, 1, 5, 6, 8, 9, 10], "directli": 8, "directori": [0, 1, 4], "disconnect": 4, "disk": 8, "displai": [0, 1], "dist": 4, "distinguish": [0, 1], "distribut": [3, 6], "dnr": 3, "do": [1, 5], "doc": 4, "docstr": 4, "document": [6, 9], "doe": [8, 9, 10], "dollar_amt": [5, 8, 9, 10], "dollar_amt_df1": 10, "dollar_amt_df2": 10, "don": [0, 1, 8, 9, 10], "done": [1, 3, 10], "drop": [8, 10], "dtype": [8, 9, 10], "duckdb": [5, 6], "due": [3, 9], "dupe": 1, "duplic": 6, "e": [0, 1, 4], "each": [0, 1, 4, 5, 8, 10], "easier": 4, "easili": [0, 1], "edgetest": 6, "empti": 8, "encod": 1, "endless": 4, "engin": 9, "ensur": 4, "enter": 0, "enum": 1, "env": 7, "environ": [4, 7], "equal": [0, 1, 6, 8, 9, 10], "equival": 5, "evalu": [0, 1], "exact": [0, 1], "exactli": [0, 5, 8], "exampl": [1, 5, 8, 10], "excel": 4, "except": [0, 1], "exclud": 1, "execut": [0, 1, 4], "executor": 3, "exist": [0, 1], "expect": 6, "experi": 3, "experiment": 9, "export": 4, "extend": [0, 1, 6], "extra": 4, "f64": 9, "fail": [0, 8], "fals": [0, 1, 5, 8, 9, 10], "fast": [0, 3], "favour": 5, "featur": 4, "feedback": 5, "few": [8, 9, 10], "field": [0, 1, 8], "file": [0, 1], "filehandl": 1, "filenam": [0, 1], "fill": 8, "final": [4, 5], "fine": [6, 7], "first": [0, 1, 4, 8, 9, 10], "fit": 8, "flag": [0, 1], "float": [0, 1], "float64": [8, 9, 10], "float_fld": [5, 8, 9, 10], "float_fld_df1": 10, "float_fld_df2": 10, "folder": 4, "follow": [4, 5, 9], "for_displai": [0, 1], "forc": 0, "forg": 6, "form": 1, "format": [0, 1, 9], "forward": [3, 6, 10], "found": 6, "frame": [0, 1], "framework": 5, "from": [0, 1, 3, 4, 5, 6, 8, 9, 10], "from_panda": 10, "fugu": [2, 3, 6, 10], "full": 5, "fulli": [0, 1], "functioanl": [6, 7], "function": [0, 1, 5, 6, 9], "further": 3, "futur": [4, 6], "gather": 5, "gener": [0, 1, 3, 6, 8, 9, 10], "generate_id_within_group": [0, 1, 2, 6], "georg": [5, 8, 9, 10], "get": [0, 1, 5], "get_merged_column": [0, 1, 2, 6], "getorcr": [5, 10], "gh": 4, "ghpage": 4, "git": 4, "github": [4, 6], "given": 1, "go": [0, 1, 4], "goal": 8, "gold": 1, "good": 9, "googl": 4, "grain": 3, "great": 5, "group": [0, 1, 8, 10], "grow": 0, "guarante": 5, "guid": 6, "guidanc": 4, "gz": 4, "ha": [4, 6, 8, 9, 10], "handl": [0, 1, 3, 8, 9, 10], "hard": 3, "have": [0, 1, 3, 4, 5, 6, 8, 9, 10], "help": [3, 4], "helper": 4, "here": [4, 6, 8, 9, 10], "highli": 7, "honor": 6, "hook": 6, "hope": 5, "how": [0, 3, 4, 6], "html": [0, 1, 4], "html_file": [0, 1], "http": [4, 10], "human": [0, 1, 5, 8, 10], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10], "i64": 9, "id": [0, 1, 3, 8, 10], "idea": 3, "ident": [0, 1], "identifi": [0, 1], "ignor": [0, 1], "ignore_cas": [0, 1], "ignore_extra_column": [0, 1, 10], "ignore_matching_col": [0, 1], "ignore_spac": [0, 1], "implement": [3, 5, 6, 9, 10], "implementaion": [3, 10], "import": [5, 6, 8, 9, 10], "improv": 3, "includ": [0, 1, 4], "increas": 3, "independ": 4, "index": [0, 1, 6, 8, 9], "indic": [0, 1], "individu": [0, 1], "initi": 8, "input": 1, "instal": [4, 5], "instanc": [1, 8, 9, 10], "instanti": 1, "instead": [0, 1], "instruct": 6, "int": [0, 1], "integ": 0, "integr": [5, 6], "interact": 6, "interfac": [5, 6, 9], "intermedi": 1, "intersect": [0, 1], "intersect_column": [0, 1, 2, 5, 6, 8, 9, 10], "intersect_row": [0, 1, 8, 9, 10], "intersect_rows_match": [0, 1, 2], "introduc": [6, 10], "io": [5, 8, 9, 10], "is_match": [0, 2, 5, 6], "isclos": [0, 1], "isn": 0, "isort": 4, "issu": [3, 6, 10], "its": [0, 1, 3, 6], "jira": 10, "join": [0, 1, 3, 5, 8, 9, 10], "join_column": [0, 1, 5, 8, 9, 10], "join_nul": 9, "just": [0, 1, 4, 5, 6, 9], "keep": [4, 6, 10], "kei": 1, "kinda": [0, 1], "know": 8, "known": 1, "known_differ": [0, 1], "larg": [1, 3, 8], "lazi": 1, "legaci": [0, 2, 4, 10], "legacysparkcompar": [0, 1, 6, 10], "let": [0, 4, 6], "level": 6, "librari": [5, 6], "licens": 6, "like": [0, 4, 5, 6, 8, 9, 10], "limit": 6, "list": [0, 1, 5, 8, 9, 10], "ll": 4, "loblaw": [5, 8, 9, 10], "local": 4, "logic": [6, 10], "look": [0, 1, 8], "loos": [5, 8, 9, 10], "lot": [3, 8], "lower": [0, 1], "lowest": 6, "lucil": [5, 8, 9, 10], "m": 4, "machin": [3, 4], "mahari": [5, 8, 9, 10], "mai": [5, 8, 9], "main": [4, 8], "maintain": 5, "make": [1, 3, 4, 6], "makefil": 4, "manag": [5, 6], "mani": [5, 6], "map": 5, "match": [0, 1, 2, 6, 8, 9, 10], "match_rat": 1, "matchin": 0, "matchtyp": [0, 1], "matrix": 6, "max": [1, 8, 9, 10], "maximum": [0, 1], "mean": [3, 6], "meant": [0, 1], "medium": 3, "mediumish": 3, "memori": [1, 8, 9], "mention": 9, "merg": [0, 1, 4, 8, 10], "merged_df": [0, 1], "messag": 4, "method": [5, 6], "michael": [5, 8, 9, 10], "might": 9, "migrat": 9, "million": 3, "minim": 3, "mismatch": [0, 1], "mix": 0, "mode": 1, "model": 9, "modul": [2, 6, 10], "montonicli": 3, "more": [0, 1, 4, 6, 8], "most": [3, 4], "move": [3, 6, 10], "much": 4, "multipl": 1, "must": [0, 4, 5, 9], "my_report": 1, "name": [0, 1, 5, 7, 8, 9, 10], "name_df1": [8, 9, 10], "name_df2": [8, 9, 10], "name_match": [8, 9, 10], "nan": [0, 1, 8, 9, 10], "nativ": [3, 5, 6, 10], "natur": 3, "na\u00efv": 8, "need": [4, 5, 8], "new": [0, 1, 4, 5, 6, 8, 9, 10], "newlin": [0, 1], "nice": [0, 1], "non": [0, 1, 5], "none": [0, 1, 4], "note": [0, 1, 4, 5, 6, 7, 8, 9, 10], "notic": 5, "now": [6, 10], "np": [0, 1], "npt": 8, "null": [0, 1, 8, 9, 10], "number": [0, 1, 3, 8, 9, 10], "numer": [0, 1, 3], "numpi": [4, 8], "obj1": 8, "obj2": 8, "object": [1, 6], "obsolet": 3, "offic": 10, "offici": 4, "olap": 9, "old": [6, 10], "on_index": [0, 8, 10], "onc": 4, "one": [0, 1, 4, 9, 10], "onli": [0, 1, 4, 8, 9, 10], "open": [0, 1, 6], "oper": [0, 1, 5, 8], "option": [0, 1, 4, 5, 10], "order": [0, 1, 4, 5], "orderedset": [0, 1, 9, 10], "org": [4, 10], "origin": [0, 1, 5, 6, 8, 9, 10], "original_df": [0, 1], "orphan": 4, "other": [0, 1, 4, 5, 6, 8, 10], "otherwis": 1, "our": 3, "out": [0, 1, 4, 5, 6, 10], "output": [0, 1, 4, 8], "over": [0, 6], "overlap": [0, 1], "overview": 6, "overwrit": [0, 1], "p": 10, "packag": [2, 4, 6], "page": [4, 6], "panda": [0, 2, 3, 4, 5, 6, 7, 9, 10], "parallel": [0, 5], "paramet": [0, 1], "particip": 6, "partit": 5, "pass": [0, 1, 4, 5], "pd": [5, 8, 10], "peopl": 4, "per": 4, "perform": [1, 3, 5, 6, 10], "pertin": [0, 1], "pick": 8, "pilot": 5, "pip": [4, 5, 6, 7], "pl": 9, "plan": 6, "pleas": [3, 5, 6, 7, 9], "polar": [2, 3, 5, 6, 7], "polarscompar": [0, 2, 6, 9], "pollut": 4, "port": 9, "post": [0, 1], "pre": [0, 1, 6], "preform": 3, "prepend": [0, 1], "present": [0, 1], "prevent": [1, 4], "print": [0, 1, 5, 6, 8, 9, 10], "proc": [0, 1, 6, 8], "process": [3, 4, 5, 6], "produc": 5, "project": [4, 6], "properli": 4, "properti": [0, 1], "proport": 1, "provid": [0, 1, 5, 6, 8, 10], "pure": 3, "push": 4, "py": 4, "py3": 4, "pypi": 6, "pyproject": 4, "pysaprk": [6, 10], "pyspark": [0, 1, 5, 6, 10], "pytest": 4, "python": [4, 5, 6, 7], "pyyaml": 4, "qualiti": 4, "queri": 9, "question": 1, "rai": [5, 6], "rais": 0, "ram": 3, "rang": 3, "rate": 1, "raw": [0, 1], "re": [8, 10], "read": [0, 1], "read_csv": [5, 8, 9, 10], "readabl": [0, 1, 5, 8, 10], "readi": 1, "real": 4, "reason": 4, "recogn": [8, 10], "recommend": 7, "recomput": 1, "record": [0, 1, 3], "redirect": 1, "refer": 1, "regener": 4, "rel": [0, 1, 8, 9, 10], "rel_tol": [0, 1, 5, 8, 9, 10], "relat": 5, "releas": 6, "renam": [6, 10], "render": [0, 1, 2, 4, 6], "replac": [0, 1, 5, 6, 8, 9, 10], "repo": [4, 6], "report": [0, 1, 2, 5, 6], "report_fil": 1, "repositori": 4, "repres": 0, "represent": [0, 1], "requir": 6, "resili": [8, 9], "result": [1, 3, 5, 9], "return": [0, 1, 4, 8, 9, 10], "right": 4, "robert": [5, 8, 9, 10], "root": 4, "row": [0, 1, 3, 6], "rows_both_al": [0, 1], "rows_both_mismatch": [0, 1], "rows_only_bas": [0, 1], "rows_only_compar": [0, 1], "run": [3, 6, 8, 9, 10], "runner": 4, "rust": 9, "sa": [0, 1, 6, 8], "safe": 10, "salt": 3, "same": [0, 1, 5, 8], "sampl": [0, 1, 5, 8, 9, 10], "sample_count": [0, 1], "sample_mismatch": [0, 1, 2], "save": [0, 1], "scene": [8, 10], "schema": 0, "seal": [5, 8, 9, 10], "search": 6, "second": [0, 1, 3, 8, 10], "section": [4, 9], "see": [3, 6, 9], "seem": 3, "semant": [4, 5], "sens": 1, "separ": 8, "seri": [0, 1, 8], "seriestyp": 0, "serv": [1, 4], "set": [0, 1, 4, 8], "setup": [4, 6], "setuptool": 7, "sever": 4, "shape": 9, "share": [0, 1], "shine": 3, "should": [0, 1, 4, 6, 7, 8, 9, 10], "show": [0, 1], "show_all_column": 1, "shown": 1, "sign": 6, "significantli": 1, "similar": [0, 1, 9], "simpl": [4, 5, 6], "sinc": 4, "singl": [3, 4], "size": 1, "skip": [0, 1], "slightli": 9, "slower": 3, "small": 3, "so": [6, 8, 9, 10], "some": [0, 1, 3, 6, 8, 9, 10], "some_field": 8, "someth": [0, 4, 6], "somewhat": 8, "soon": 4, "sort": 8, "sourc": [6, 7], "spark": [0, 2, 3, 5], "spark_df2": 5, "spark_sess": [0, 1], "sparkcompar": [1, 5, 6, 10], "sparkpandascompar": [0, 1, 2, 6], "sparksess": [0, 1, 5, 10], "sparksqlcompar": [0, 1, 2, 6], "specif": 5, "specifi": [1, 5, 8, 9, 10], "speed": 1, "sphinx": 4, "sql": [0, 2, 3, 5, 6, 10], "squash": 4, "standard": 1, "start": [0, 3, 6], "stat": [0, 6], "statement": 1, "stdout": 1, "step": [1, 8], "still": 4, "store": 4, "str": [0, 1, 9], "streamlin": 4, "strict_schema": 0, "string": [0, 1, 3, 8, 9, 10], "stringio": [5, 8, 9, 10], "strip": [0, 1], "style": 4, "sub": [0, 1], "subfold": 4, "submodul": [2, 6, 10], "subpackag": [2, 6], "subsequ": [6, 10], "subset": [0, 1, 2, 4], "suffix": [0, 1], "summar": [5, 10], "summari": [1, 8, 9, 10], "support": [0, 7, 8, 9], "sure": [4, 6], "sy": 1, "synthet": 3, "t": [0, 1, 8, 9, 10], "tabl": [3, 5, 8, 9, 10], "tag": 4, "take": [1, 3], "taken": 4, "tar": 4, "temp": 0, "temp_column_nam": [0, 2, 6], "temp_id": [8, 10], "templat": [0, 1], "temporari": [0, 8, 10], "test": [6, 7, 8, 10], "textio": 1, "textiowrapp": 1, "than": [0, 5, 6], "thei": [4, 9], "them": 8, "thi": [0, 1, 4, 5, 6, 8, 9, 10], "thing": 9, "third": [8, 10], "though": 5, "time": [3, 6], "tldr": 6, "toler": [0, 1, 8, 9, 10], "toml": 4, "toni": [8, 10], "top": 9, "total": [8, 9, 10], "track": [0, 1], "transform": 1, "treat": 1, "tri": [0, 1, 3, 9], "trigger": [0, 1], "true": [0, 1, 4, 8, 9, 10], "try": [8, 9, 10], "tune": 3, "tupl": 1, "tweak": [0, 6], "twine": 4, "two": [0, 1, 5, 6, 8, 9, 10], "txt": 1, "type": [0, 1, 4, 8, 9, 10], "ultim": 1, "under": [4, 6, 10], "understand": 3, "unequ": [8, 9, 10], "unexpect": 9, "unifi": [5, 6], "uniqu": [0, 1, 8, 10], "unit": 6, "unittest": 4, "unlik": 9, "unq_column": [0, 2, 5, 6], "until": 10, "up": [1, 4, 8], "updat": 4, "upgrad": [4, 7], "upload": 4, "url": 4, "us": [0, 1, 4, 5, 6, 7, 8, 9, 10], "usag": 6, "user": [0, 1, 3, 4], "utf": 1, "util": 4, "v0": [6, 9, 10], "valu": [0, 1, 8, 9, 10], "valueerror": 8, "vanilla": 0, "variabl": [0, 1], "vast": 3, "ve": 3, "veri": [3, 8, 9], "versa": [0, 1], "version": [0, 1, 3, 4, 5, 9], "via": [4, 5, 6], "vice": [0, 1], "virtual": 7, "virtualenv": 6, "w": 1, "wa": [0, 1, 3, 6, 10], "wai": [0, 1, 5, 6], "want": [4, 5], "we": [3, 4, 5, 6, 10], "welcom": [3, 6], "what": [0, 1, 6, 8], "wheel": 4, "when": [0, 1, 3, 4, 8], "where": [0, 1, 4], "whether": [0, 1, 8], "which": [0, 1, 3, 4, 5, 6, 8, 9, 10], "while": 1, "whitespac": [0, 1], "whl": 4, "wide": 1, "wisdom": 4, "wise": [0, 1], "wish": [6, 10], "within": [0, 1, 6, 8, 10], "without": [0, 1], "wonder": [8, 10], "work": [1, 4, 6, 7], "workflow": 4, "world": 1, "would": [1, 6], "write": 1, "x": [0, 1], "y": 1, "ye": [8, 9], "yield": 9, "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10], "your": [1, 4, 6, 8, 9, 10], "zero": 0}, "titles": ["datacompy package", "datacompy.spark package", "datacompy", "Benchmarks", "Developer Instructions", "Fugue Detail", "DataComPy", "Installation", "Pandas Usage", "Polars Usage", "Spark Usage"], "titleterms": {"The": 3, "api": 6, "archiv": 4, "backend": 6, "base": 0, "basic": [5, 7, 9], "benchmark": 3, "caveat": [8, 9], "commit": 4, "compar": [5, 8, 9], "conda": 7, "content": [0, 1, 6], "contributor": 6, "conveni": [8, 9, 10], "core": 0, "cross": 5, "data": 3, "datacompi": [0, 1, 2, 6], "depend": 7, "dependnci": 6, "deprec": 6, "detail": 5, "develop": 4, "distribut": 4, "document": 4, "duplic": [8, 9, 10], "edgetest": 4, "extra": 6, "forg": 7, "from": 7, "fugu": [0, 5], "futur": 5, "gener": 4, "guid": 4, "hook": 4, "how": 5, "indic": 6, "instal": [6, 7], "instruct": 4, "legaci": [1, 6], "limit": [8, 9], "manag": 4, "method": [8, 9, 10], "modul": [0, 1], "object": [8, 9, 10], "overview": [8, 9], "packag": [0, 1], "panda": [1, 8], "polar": [0, 9], "pre": 4, "pypi": [4, 7], "quick": 6, "refer": 6, "releas": [4, 5], "report": [8, 9, 10], "requir": 4, "roadmap": 6, "row": [8, 9, 10], "run": 4, "setup": [3, 8, 9, 10], "spark": [1, 6, 10], "sparkpandascompar": 10, "sparksqlcompar": 10, "sql": 1, "submodul": [0, 1], "subpackag": 0, "support": [6, 10], "tabl": 6, "test": 4, "tldr": 3, "unit": 4, "us": 3, "usag": [5, 8, 9, 10], "version": [6, 10], "virtualenv": 7, "work": 5}})