[build-system]
build-backend = "setuptools.build_meta"

requires = [ "setuptools>=64" ]

[project]
name = "datacompy"
description = "Dataframe comparison in Python"
readme = "README.md"
license = { text = "Apache Software License" }
maintainers = [
  { name = "Faisal Dosani", email = "faisal.dosani@capitalone.com" },
  { name = "Jacob Dawang", email = "jacob.dawang@capitalone.com" },
  { name = "Raymond Haffar", email = "raymond.haffar@capitalone.com" },
]
authors = [
  { name = "Faisal Dosani", email = "faisal.dosani@capitalone.com" },
  { name = "Raymond Haffar", email = "raymond.haffar@capitalone.com" },
  { name = "Jacob Dawang", email = "jacob.dawang@capitalone.com" },
]
requires-python = ">=3.10.0"
classifiers = [
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dynamic = [ "version" ]

dependencies = [
  "jinja2>=3",
  "numpy>=1.22,<=2.2.6; python_version=='3.10'",
  "numpy>=1.22,<=2.3.2; python_version>='3.11'",
  "ordered-set>=4.0.2,<=4.1",
  "pandas>=0.25,<=2.3.1",
  "polars[pandas]>=0.20.4,<=1.32.3",
]
optional-dependencies.build = [ "build", "twine", "wheel" ]
optional-dependencies.dev = [
  "datacompy[build]",
  "datacompy[docs]",
  "datacompy[fugue]",
  "datacompy[qa]",
  "datacompy[snowflake]",
  "datacompy[spark]",
  "datacompy[tests-snowflake]",
  "datacompy[tests-spark]",
  "datacompy[tests]",
]

# Linters, formatters and type checkers
optional-dependencies.dev_no_snowflake = [
  "datacompy[build]",
  "datacompy[docs]",
  "datacompy[fugue]",
  "datacompy[qa]",
  "datacompy[spark]",
  "datacompy[tests-spark]",
  "datacompy[tests]",
]
optional-dependencies.docs = [ "furo", "myst-parser", "sphinx" ]
optional-dependencies.edgetest = [ "edgetest", "edgetest-conda" ]
optional-dependencies.fugue = [ "fugue[dask,duckdb,ray]>=0.8.7,<=0.9.1" ]
optional-dependencies.qa = [ "mypy", "pandas-stubs", "pre-commit", "ruff==0.5.7" ]
optional-dependencies.snowflake = [ "snowflake-connector-python", "snowflake-snowpark-python" ]
optional-dependencies.spark = [ "pyspark[connect]>=3.4,<=3.5.6" ]
optional-dependencies.tests = [ "pytest", "pytest-cov" ]
optional-dependencies.tests-snowflake = [ "snowflake-snowpark-python[localtest]" ]
optional-dependencies.tests-spark = [ "pytest", "pytest-cov", "pytest-spark" ]
urls."Bug Tracker" = "https://github.com/capitalone/datacompy/issues"
urls.Documentation = "https://capitalone.github.io/datacompy/"
urls.Homepage = "https://github.com/capitalone/datacompy"
urls.Repository = "https://github.com/capitalone/datacompy.git"
urls."Source Code" = "https://github.com/capitalone/datacompy"

[tool.setuptools]
packages = [ "datacompy", "datacompy.spark" ]
zip-safe = false
include-package-data = true

[tool.setuptools.package-data]
"*" = [ "templates/*.j2", "templates/*.txt" ]

[tool.setuptools.dynamic]
version = { attr = "datacompy.__version__" }

[tool.distutils.bdist_wheel]
python-tag = "py3"

[tool.ruff]
target-version = "py310"
src = [ "src" ]

extend-include = [ "*.ipynb" ]
lint.select = [
  "B", # flake8-bugbear
  # "A", # flake8-builtins
  "C4",  # flake8-comprehensions
  "D",   # pydocstyle
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "LOG", # flake8-logging
  "NPY", # numpy rules
  "RUF", # Ruff errors
  # "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  #"C901", # mccabe complexity
  # "G", # flake8-logging-format
  "T20",    # flake8-print
  "TID252", # flake8-tidy-imports ban relative imports
  "UP",     # pyupgrade
  "W",      # pycodestyle warnings
]
lint.ignore = [
  "D206",   # Docstring indentation. Using formatter instead.
  "D300",   # Use triple single quotes. Using formatter instead.
  "E111",   # Check indentation level. Using formatter instead.
  "E114",   # Check indentation level. Using formatter instead.
  "E117",   # Check indentation level. Using formatter instead.
  "E203",   # Check whitespace. Using formatter instead.
  "E501",   # Line too long. Using formatter instead.
  "SIM105", # Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`
  "SIM108", # Use ternary operator instead of if-else blocks.
  "UP006",  # `typing.x` is deprecated, use `x` instead
  "UP035",  # `typing.x` is deprecated, use `x` instead
]
lint.per-file-ignores."**/{tests,docs}/*" = [ "ARG", "D", "E402", "F841" ]
lint.per-file-ignores."__init__.py" = [ "E402" ]
lint.flake8-tidy-imports.ban-relative-imports = "all"
lint.pydocstyle.convention = "numpy"
lint.preview = true

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = [ "fugue.*", "triad.*" ]
implicit_reexport = true

[[tool.mypy.overrides]]
module = "pyarrow"
ignore_missing_imports = true

[edgetest.envs.core]
python_version = "3.10"
conda_install = [ "openjdk=8" ]
extras = [ "dev" ]
command = "pytest tests/ --ignore=tests/test_snowflake.py"
upgrade = [
  "pandas",
  "numpy",
  "ordered-set",
  "polars[pandas]",
]
