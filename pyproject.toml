[project]
name = "datacompy"
description = "Dataframe comparison in Python"
readme = "README.md"
authors = [
  { name="Ian Robertson" },
  { name="Dan Coates" },
  { name="Faisal Dosani", email="faisal.dosani@capitalone.com" },
]
maintainers = [
  { name="Faisal Dosani", email="faisal.dosani@capitalone.com" }
]
license = {text = "Apache Software License"}
dependencies = ["pandas<=2.2.2,>=0.25.0", "numpy<=1.26.4,>=1.22.0", "ordered-set<=4.1.0,>=4.0.2", "fugue<=0.9.1,>=0.8.7", "polars<=1.7.0,>=0.20.4"]
requires-python = ">=3.9.0"
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/capitalone/datacompy"
Documentation = "https://capitalone.github.io/datacompy/"
Repository = "https://github.com/capitalone/datacompy.git"
"Bug Tracker" = "https://github.com/capitalone/datacompy/issues"
"Source Code" = "https://github.com/capitalone/datacompy"

[build-system]
requires = ["setuptools>=64.0.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["datacompy", "datacompy.spark"]
zip-safe = false
include-package-data = true

[tool.setuptools.package-data]
"*" = ["templates/*.txt"]

[tool.setuptools.dynamic]
version = {attr = "datacompy.__version__"}

[tool.distutils.bdist_wheel]
python-tag = "py3"

[project.optional-dependencies]
duckdb = ["fugue[duckdb]"]
spark = ["pyspark[connect]>=3.1.1; python_version < \"3.11\"", "pyspark[connect]>=3.4; python_version >= \"3.11\""]
dask = ["fugue[dask]"]
ray = ["fugue[ray]"]
docs = ["sphinx", "furo", "myst-parser"]
tests = ["pytest", "pytest-cov"]

tests-spark = ["pytest", "pytest-cov", "pytest-spark"]
qa = ["pre-commit", "ruff==0.5.7", "mypy", "pandas-stubs"]
build = ["build", "twine", "wheel"]
edgetest = ["edgetest", "edgetest-conda"]
dev = ["datacompy[duckdb]", "datacompy[spark]", "datacompy[docs]", "datacompy[tests]", "datacompy[tests-spark]", "datacompy[qa]", "datacompy[build]"]

# Linters, formatters and type checkers
[tool.ruff]
extend-include = ["*.ipynb"]
target-version = "py39"
src = ["src"]

[tool.ruff.lint]
preview = true
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "D", # pydocstyle
    "I", # isort
    "UP", # pyupgrade
    "B", # flake8-bugbear
    # "A", # flake8-builtins
    "C4", # flake8-comprehensions
    #"C901", # mccabe complexity
    # "G", # flake8-logging-format
    "T20", # flake8-print
    "TID252", # flake8-tidy-imports ban relative imports
    # "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "NPY", # numpy rules
    "LOG", # flake8-logging
    "RUF", # Ruff errors
]

ignore = [
    "E111",  # Check indentation level. Using formatter instead.
    "E114",  # Check indentation level. Using formatter instead.
    "E117",  # Check indentation level. Using formatter instead.
    "E203",  # Check whitespace. Using formatter instead.
    "E501",  # Line too long. Using formatter instead.
    "D206",  # Docstring indentation. Using formatter instead.
    "D300",  # Use triple single quotes. Using formatter instead.
    "SIM108",  # Use ternary operator instead of if-else blocks.
    "SIM105", # Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`
    "UP035", # `typing.x` is deprecated, use `x` instead
    "UP006", # `typing.x` is deprecated, use `x` instead
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs}/*" = ["E402", "D", "F841", "ARG"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = ["fugue.*","triad.*"]
implicit_reexport = true

[[tool.mypy.overrides]]
module = "pyarrow"
ignore_missing_imports = true

[edgetest.envs.core]
python_version = "3.10"
conda_install = ["openjdk=8"]
extras = ["dev"]
command = "pytest tests -m 'not integration'"
upgrade = [
    "pandas",
    "numpy",
    "ordered-set",
    "fugue",
    "polars",
]
