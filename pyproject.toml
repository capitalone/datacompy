[project]
name = "datacompy"
description = "Dataframe comparison in Python"
readme = "README.md"
authors = [
  { name="Faisal Dosani", email="faisal.dosani@capitalone.com" },
  { name="Raymond Haffar", email="raymond.haffar@capitalone.com" },
]
maintainers = [
  { name="Faisal Dosani", email="faisal.dosani@capitalone.com" },
  { name="Jacob Dawang", email="jacob.dawang@capitalone.com" },
  { name="Raymond Haffar", email="raymond.haffar@capitalone.com" },
]
license = {text = "Apache Software License"}
dependencies = [
  "pandas<=2.3.0,>=2.2.3",
  "numpy<=2.2.6,>=2.2.2",
  "ordered-set<=4.1.0,>=4.0.2",
  "polars[pandas]<=1.31.0,>=1.19.0",
  "pyspark[connect]<=4.0.0,>=4.0.0",
  "snowflake-snowpark-python<=1.33.0,>=1.26.0",
  "Jinja2>=3.0.0"
  ]
requires-python = ">=3.10.0"
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/capitalone/datacompy"
Documentation = "https://capitalone.github.io/datacompy/"
Repository = "https://github.com/capitalone/datacompy.git"
"Bug Tracker" = "https://github.com/capitalone/datacompy/issues"
"Source Code" = "https://github.com/capitalone/datacompy"

[build-system]
requires = ["setuptools>=64.0.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["datacompy"]
zip-safe = false
include-package-data = true

[tool.setuptools.package-data]
"*" = ["templates/*.j2", "templates/*.txt"]

[tool.setuptools.dynamic]
version = {attr = "datacompy.__version__"}

[tool.distutils.bdist_wheel]
python-tag = "py3"

[project.optional-dependencies]
docs = ["sphinx", "furo", "myst-parser"]
tests = ["pytest", "pytest-cov", "pytest-spark", "snowflake-snowpark-python[localtest]"]
qa = ["pre-commit", "ruff==0.5.7", "mypy", "pandas-stubs"]
build = ["build", "twine", "wheel"]
edgetest = ["edgetest", "edgetest-conda"]
dev = ["datacompy[docs]", "datacompy[tests]", "datacompy[qa]", "datacompy[build]"]

# Linters, formatters and type checkers
[tool.ruff]
extend-include = ["*.ipynb"]
target-version = "py310"
src = ["src"]

[tool.ruff.lint]
preview = true
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "D", # pydocstyle
    "I", # isort
    "UP", # pyupgrade
    "B", # flake8-bugbear
    # "A", # flake8-builtins
    "C4", # flake8-comprehensions
    #"C901", # mccabe complexity
    # "G", # flake8-logging-format
    "T20", # flake8-print
    "TID252", # flake8-tidy-imports ban relative imports
    # "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "NPY", # numpy rules
    "LOG", # flake8-logging
    "RUF", # Ruff errors
]

ignore = [
    "E111",  # Check indentation level. Using formatter instead.
    "E114",  # Check indentation level. Using formatter instead.
    "E117",  # Check indentation level. Using formatter instead.
    "E203",  # Check whitespace. Using formatter instead.
    "E501",  # Line too long. Using formatter instead.
    "D206",  # Docstring indentation. Using formatter instead.
    "D300",  # Use triple single quotes. Using formatter instead.
    "SIM108",  # Use ternary operator instead of if-else blocks.
    "SIM105", # Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`
    "UP035", # `typing.x` is deprecated, use `x` instead
    "UP006", # `typing.x` is deprecated, use `x` instead
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs}/*" = ["E402", "D", "F841", "ARG"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = ["fugue.*","triad.*"]
implicit_reexport = true

[[tool.mypy.overrides]]
module = "pyarrow"
ignore_missing_imports = true

[edgetest.envs.core]
python_version = "3.10"
conda_install = ["openjdk=8"]
extras = ["dev"]
command = "pytest tests/ --ignore=tests/test_snowflake.py"
upgrade = [
    "pandas",
    "numpy",
    "ordered-set",
    "polars[pandas]",
    "pyspark[connect]",
    "snowflake-snowpark-python"
]
